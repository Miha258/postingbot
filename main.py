import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram import executor
from bot.db.account import Bots, Paynaments, Channels, Users, Posts, Greetings, Adds, Admins
import logging
from os import kill


logging.basicConfig(level = logging.INFO)

class BotStates(StatesGroup):
    TYPE = State()
    TOKEN = State()
    DELETE = State()

def check_token(token):
    try:
        Bot(token = token)
        return True
    except Exception as e:
        print(f"Token is invalid. Error: {str(e)}")
        return False

bot = Bot(token = '6385303816:AAFUdMwXkVpnV9EjtQb_liLrQriB0U58T0g')
storage = MemoryStorage()
dp = Dispatcher(bot, storage = storage)
bot_types = ["–ü–æ—Å—Ç–∏–Ω–≥", "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π"]
main_kb = ReplyKeyboardMarkup(keyboard = [[KeyboardButton("–ú–æ—ó –±–æ—Ç–∏"), KeyboardButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞")]], resize_keyboard = True)

@dp.message_handler(commands = ['start'], state = "*")
async def newbot_command_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("""
<strong><b>–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ–≥–æ –±–æ—Ç–∞ –≤ 2 –µ—Ç–∞–ø–∞:</b></strong>              

1.<b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–ª—è –±–æ—Ç–∞ –≤ @BotFather:</b>
  ‚óâ–ó–∞–ø—É—Å—Ç—ñ—Ç—å @BotFather —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–º—É –∫–æ–º–∞–Ω–¥—É /newbot
  ‚óâ–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ —ñ–º'—è –¥–ª—è –±–æ—Ç–∞ (—Ü–µ —ñ–º'—è –±—É–¥–µ –≤–∏–¥–Ω–æ –≤—Å—ñ–º –∑–≤–µ—Ä—Ö—É)
  ‚óâ–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–ª—ñ–Ω–∫) –¥–ª—è –±–æ—Ç–∞. –í–∞–∂–ª–∏–≤–æ, —â–æ–± –ª—ñ–Ω–∫ –º–∞–≤ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è "bot" —ñ –Ω–µ –±—É–≤ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.

2.<b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:</b>
   –¢–æ–∫–µ–Ω - —Ü–µ –¥–æ–≤–≥–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ, –≤–∏–∫–æ–Ω–∞–≤—à–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫.\n–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–æ–∫–µ–Ω–æ–º –≤—ñ–¥ @BotFather –ø—Ä—è–º–æ —Å—é–¥–∏.

<strong>üí°–£–≤–∞–≥–∞: –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞—É–ø—Å–∫—É —ñ–Ω—à–∏—Ö –±–æ—Ç—ñ–≤.</strong>

<strong>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? –ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è: </strong>
    """, parse_mode = "html", reply_markup = main_kb) 


@dp.callback_query_handler(lambda cb: cb.data == 'back_to_menu', state = "*")
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer('–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é:')

@dp.message_handler(lambda m: m.text in ('–°—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞', '/newbot'), state = '*')
async def get_bots(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.TYPE)
    kb = ReplyKeyboardMarkup([[KeyboardButton(type) for type in bot_types]], resize_keyboard = True)
    await message.answer(f'<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –±–æ—Ç–∞:</b>', parse_mode = "html", reply_markup = kb)
    

@dp.message_handler(lambda m: m.text in ('–ú–æ—ó –±–æ—Ç–∏', '/mybots'), state = '*')
async def get_bots(message: types.Message):
    bots = await Bots.get("user_id", message.from_id, True)
    if not bots:
        return await message.answer(f'<b>–£ –≤–∞—Å –Ω–µ–º–∞—î –±–æ—Ç—ñ–≤.–°—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ, –Ω–∞–∂–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞"</b>', parse_mode = "html")
    
    bots_kb = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton((await Bot(_bot["token"]).get_me()).mention, callback_data = f"edit_bot_{_bot['id']}")] for _bot in bots])
    await message.answer(f'<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç—ñ–≤:</b>', reply_markup = bots_kb, parse_mode = "html")


@dp.message_handler(lambda m: m.text in bot_types, state = BotStates.TYPE)
async def set_type(message: types.Message, state: FSMContext):
    type = message.text

    if type == "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π":
        await state.set_data({"type": "inviting"})
    elif type == "–ü–æ—Å—Ç–∏–Ω–≥":
        await state.set_data({"type": "posting"})

    await state.set_state(BotStates.TOKEN) 
    await message.answer(f'<b>–í–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞:</b>', parse_mode = "html")


@dp.message_handler(state = BotStates.TOKEN)
async def process_newbot_token(message: types.Message, state: FSMContext):
    data = await state.get_data()
    type = data["type"]
    new_bot_token = message.text.strip()
    owner = message.from_id

    bots = await Bots.get("user_id", message.from_id, True)
    bots =  [_bot["token"] for _bot in await Bots.get("user_id", message.from_id, True)] if bots else []

    if not check_token(new_bot_token):
        return await message.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω.–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:') 
    
    elif message.text in bots:
        return await message.reply('–¢–∞–∫–∏–π —Ç–æ–∫–µ–Ω –≤–∂–µ –∑–∞—Ä—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π') 

    process = subprocess.Popen(['python3', 'bot/main.py', new_bot_token, str(owner), type])
    bot = Bot(token = new_bot_token)
    bot = await bot.get_me()
    await message.reply(f'{bot.mention} –∑–∞–ø—É—â–µ–Ω–∏–π.–í–∏–∫–æ—Ä–∏—Å—Ç–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.–í–∏–∫–æ—Ä–∏—Å—É—Ç–æ–≤—É–π—Ç–µ /bots, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–æ—Ç—ñ–≤', reply_markup = main_kb)
    await Bots(bot.id, user_id = message.from_id, token = message.text, type = type, username = '@' + bot.username, p_id = process.pid)()
    await state.finish()  


@dp.callback_query_handler(lambda cb: "edit_bot" in cb.data)
async def edit_bot(callback_query: types.CallbackQuery):
    bot_id = callback_query.data.split('_')[-1]
    _bot = await Bots.get('id', bot_id)
    edit_kb = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏', callback_data = f'delete_bot_{bot_id}')],
        [InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data = 'back_to_menu')]
    ])
    await callback_query.message.edit_text(f'–í–∏–±–µ—Ä—Ç—å –¥—ñ—é –¥–ª—è {_bot["username"]}:', reply_markup = edit_kb)


@dp.callback_query_handler(lambda cb: "delete_bot" in cb.data)
async def delete_bot(callback_query: types.CallbackQuery):
    bot_id = callback_query.data.split('_')[-1]
    bot = await Bots.get("id", bot_id)
    kill(bot['p_id'], 9)

    await Bots.delete(bot_id)
    channels = await Channels.get("bot_id", bot_id, True)
    if channels:
        for channel in channels:
            await Channels.delete(channel['id'])

    posts = await Posts.get("bot_id", bot_id, True)
    if posts:
        for post in posts:
            await Posts.delete(post['id'])

    greetings = await Greetings.get("bot_id", bot.id, True)
    if greetings:
        for greet in greetings:
            await Greetings.delete(greet['id'])

    users = await Users.get('bot_id', bot.id, True)
    if users:
        for user in users:
            await Users.delete(user['id'])
    
    bot = await Bot(token = bot['token']).get_me()
    await callback_query.message.answer(f'{bot.mention} –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π')
    await callback_query.message.delete()

async def start_bots(_):
    await Bots.init_table({
        "id": "INT",
        "user_id": "INT",
        "p_id": "INT",
        "token": "TEXT",
        "username": "TEXT",
        "type": "TEXT",
        "subscription": "BOOLEAN",
        "subscription_to": "DATE"
    })

    await Channels.init_table({
        "id": "INT",
        "chat_id": "INT",
        "bot_id": "INT",
        "name": "TEXT",
        "subscribers": "INT",
        "watermark": "TEXT",
        "capcha": "TEXT"
    })

    await Paynaments.init_table({
        "id": "INT",
        "user_id": "INT",
        "amount": "INT",
        "currency": "TEXT",
        "created_at": "DATETIME",
        "paid_at": "DATETIME"
    })

    await Users.init_table({
        "id": "INT",
        "bot_id": "INT"
    })
    
    await Greetings.init_table({
        "id": "INT",
        "bot_id": "INT",
        "channel_id": "TEXT",
        "greet_text": "TEXT",
        "autodelete": "INT",
        "delay": "INT",
        "buttons": "TEXT",
        "image": "TEXT"
    })

    await Posts.init_table({
        "id": "INT",
        "bot_id": "INT",
        "channel_id": "TEXT", 
        "post_text": "TEXT",
        "hidden_extension_text_1": "TEXT",
        "hidden_extension_text_2": "TEXT",
        "hidden_extension_btn": "TEXT",
        "url_buttons": "TEXT",
        "parse_mode": "TEXT",
        "comments": "BOOLEAN",
        "notify": "BOOLEAN",
        "watermark": "TEXT",
        "delay": "DATE",
        "media": "TEXT",
        "autodelete": "DATE",
        "is_published": "BOOLEAN",
        "preview": "BOOLEAN"
    })
    
    await Adds.init_table({
        "id": "INT",
        "bot_id": "INT",
        "adds_text": "TEXT",
        "delay": "DATE",
        "buttons": "TEXT",
        "media": "TEXT",
        "is_published": "BOOLEAN"
    })

    await Admins.init_table({
        "id": "INT",
        "username": "TEXT",
        "bot_id": "INT",
        "channels": "TEXT"
    })
    
    user_bots = await Bots.all()
    if user_bots:
        for _bot in user_bots:
            try:
                token = _bot["token"]
                owner = _bot["user_id"]
                type = _bot["type"]
                process = subprocess.Popen(['python3', 'bot/main.py', token, str(owner), type])
                await Bots.update('id', _bot['id'], p_id = process.pid)
                
                bot_instance = Bot(token = token)
                bot_mention = await bot_instance.get_me()

                await bot.send_message(owner, f'–í–∞—à <a href="https://t.me/{bot_mention.mention}">–±–æ—Ç</a> –∑–Ω–æ–≤—É –ø—Ä–∞—Ü—é—î!', parse_mode = types.ParseMode.HTML)
            except Exception as e:
                await bot.send_message(owner, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤–∞—à–æ–≥–æ –±–æ—Ç–∞.–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É")  


async def stop_bots(_): 
    user_bots = await Bots.all()
    if user_bots:
        for _bot in user_bots:
            token = _bot["token"]
            owner = _bot["user_id"]
            
            bot_instance = Bot(token = token)
            bot_mention = await bot_instance.get_me()
            await bot.send_message(owner, f'–í–∞—à {bot_mention.mention} —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–ø–∏–Ω—è—î —Ä–æ–±–æ—Ç—É.', reply_markup = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ó–≤—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", url = "https://t.me/")
            ]]))


if __name__ == '__main__':
    executor.start_polling(dp, on_startup = start_bots, on_shutdown = stop_bots)