from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from create_bot import bot_type, bot
import datetime, calendar

back_btn = InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data = "back_to_menu")
back_to_edit = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', callback_data = "back_to_edit")]
])

make_new_post_kb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç', callback_data = 'create_post_again')]
])

confirm_post_kb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton('–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data = 'cancle_post')],
    [InlineKeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data = 'create_post')]
])

confirm_deley_post_kb = InlineKeyboardMarkup(inline_keyboard = [
    back_to_edit.inline_keyboard[0],
    [InlineKeyboardButton('–í—ñ–¥–∫–ª–∞—Å—Ç–∏ –ø–æ—Å—Ç', callback_data = 'delay_post')]
])

def main_menu():
    buttons = []
    
    if bot_type == "inviting":
        buttons.append(KeyboardButton('–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è'))
        buttons.append(KeyboardButton('–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏'))
        buttons.append(KeyboardButton('–†–æ–∑—Å–∏–ª–∫–∞'))
    elif bot_type == "posting":
        buttons.append(KeyboardButton('–ü–æ—Å—Ç–∏–Ω–≥'))
        buttons.append(KeyboardButton('–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω'))
        buttons.append(KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç'))

    
    markup = ReplyKeyboardMarkup(resize_keyboard = True, keyboard = [
        buttons,
        [KeyboardButton("–í–∏–±—Ä–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton("–¢–∞—Ä–∏—Ñ–∏")]
    ])
    return markup

def back_to_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True)
    keyboard.add(back_btn)
    return keyboard


def skip_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    keyboard.add(KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é'))
    return keyboard

def check_add_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True)
    keyboard.add(KeyboardButton('–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏'))
    keyboard.add(KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'))
    keyboard.add(KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é'))
    return keyboard

def edit_capcha_kb(status = False, capcha_buttons: str = None):
    inline_markup = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data = 'edit_capcha')],
        [InlineKeyboardButton('–í–∏–º–∫–Ω—É—Ç–∏', callback_data = 'set_capcha_status')] if status else [InlineKeyboardButton('–£–≤—ñ–º–∫–Ω—É—Ç–∏', callback_data = 'set_capcha_status')],
        [InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data = 'back_to_greet_menu')]
    ])

    if capcha_buttons:
        capcha_data = capcha_buttons.split(' , ')
        capcha_answers = {}
        btns = []
        for data in capcha_data:
            reply, answer = data.split(' | ')
            capcha_answers[reply] = answer
            btns.append(InlineKeyboardButton(reply, callback_data = '_'))
        inline_markup.inline_keyboard.insert(0, btns)

    return inline_markup

def get_user_kb(data: dict):
    user_kb = InlineKeyboardMarkup()
    
    if data.get("hidden_extension_btn"):
        user_kb.add(InlineKeyboardButton(data["hidden_extension_btn"], callback_data = "hidden_extension_use"))
    
    url_buttons = data.get("url_buttons")
    if url_buttons:
        if isinstance(url_buttons, list):
            row_btns = []
            column_buttons = 0
            for btn in url_buttons:
                if isinstance(btn, list):
                    user_kb.inline_keyboard.insert(column_buttons, btn)
                    column_buttons += 1
                elif isinstance(btn, InlineKeyboardButton):
                    row_btns.append(btn)

        elif isinstance(url_buttons, str):
            row_btns = 0
            for i, btn in enumerate(url_buttons.split('\n')):
                if btn:
                    if '|' not in btn:
                        name, url = btn.split(' - ')
                        user_kb.inline_keyboard.insert(i + 1, [InlineKeyboardButton(name, url)])
                    elif '|' in btn:
                        btns = []
                        for b in btn.split('|'):
                            name, url = b.split(' - ')
                            btns.append(InlineKeyboardButton(name, url))
                        user_kb.inline_keyboard.insert(row_btns, btns)
    
        if row_btns:
            user_kb.inline_keyboard.insert(0, row_btns)
    user_kb = user_kb if user_kb.inline_keyboard else None
    return user_kb


def get_calendar(month: int = 0):
    inline_markup = InlineKeyboardMarkup(row_width=7)
    date = datetime.datetime.today()

    if month < 0:
        date = date.replace(year = date.year + 1) 
    
    start = 1 if month else date.day
    end = calendar.monthrange(date.year, date.month + month)[1]
    for day in range(start, end + 1):
        inline_markup.insert(InlineKeyboardButton(str(day), callback_data = f"calendar_day:{date.year}-{date.month + month}-{day}"))
    
    months = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ]   

    inline_markup.row(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data = "prev_month"),
        InlineKeyboardButton(months[date.month + month - 1], callback_data = "current_month"),
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data = "next_month"),
    )
    return inline_markup

def get_edit_planed_post_kb(post_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data = f'change_planned_post_{post_id}')],
        [InlineKeyboardButton('–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', callback_data = f'change_planed_post_schedule_{post_id}')],
        [InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏', callback_data = f'remove_planned_post_{post_id}')]
    ])
    return kb

def get_adds_kb():
    kb = InlineKeyboardMarkup(inline_keyboard = [
        [   
            InlineKeyboardButton('–†–æ–∑—Å–∏–ª–∫–∞', callback_data = f'create_add'),
            InlineKeyboardButton('‚Üê –†–æ–∑–∫–ª–∞–¥', callback_data = f'adds_calendar')
        ]
    ])
    return kb

def get_autodelete_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    button_rows = [
        [24],
        [36],
        [48],
        [72]
    ]
    buttons = []
    for row in button_rows:
        button_row = []
        for button in row:
            button_row.append(InlineKeyboardButton(f'{button}h', callback_data = f'set_autodelete_{button}'))
        buttons.append(button_row)
    kb.inline_keyboard = buttons
    return kb

async def get_plan_kb(data, date: datetime.datetime, full = False):
    kb = InlineKeyboardMarkup()
    if data:
        for record in data:
            if record['delay'] and not record['is_published']:
                delay = datetime.datetime.strptime(record['delay'], "%Y-%m-%d %H:%M:%S")
                if delay.date() == date.date():
                    kb.add(InlineKeyboardButton(
                        f"üìÖ {record['post_text'][:15]}... {':'.join(record['delay'].split(' ')[1].split(':')[:-1])}",
                        callback_data = f'edit_planned_post_{record["id"]}'
                    )
            )
    if full:
        return get_calendar()  
        
    date_fromat = "%Y-%m-%d"
    plus_day = datetime.timedelta(days = 1)

    prev_day = datetime.datetime.strftime(date - plus_day, date_fromat)
    curr_day = datetime.datetime.strftime(date, date_fromat)
    next_day = datetime.datetime.strftime(date + plus_day, date_fromat)
    
    day_buttons = []
    if (date - plus_day).date() >= datetime.datetime.now().date():
        day_buttons.append(
            InlineKeyboardButton(
                f"‚Üê {prev_day}",
                callback_data = f'prev_day'
            )
        )
    day_buttons.append(
        InlineKeyboardButton(
            f"{curr_day}",
            callback_data = f'_'
        )
    )
    day_buttons.append(
        InlineKeyboardButton(
            f"{next_day} ‚Üí",
            callback_data = f'next_day'
        )
    )
    kb.inline_keyboard.append(day_buttons)
    kb.add(
        InlineKeyboardButton(
            f"–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä",
            callback_data = f'full_calendar'
        )
    )
    kb.add(
        InlineKeyboardButton(
            f"–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç",
            callback_data = f'plan_post'
        )
    )
    return kb
